// Generated by @wagmi/cli@0.1.14 on 4/6/2023 at 10:18:05 AM
import {
  Address,
  useContract,
  UseContractConfig,
  useContractEvent,
  UseContractEventConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
} from 'wagmi';
import {
  PrepareWriteContractResult,
  ReadContractResult,
  WriteContractMode,
} from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PaprController
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export const paprControllerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_maxLTV', internalType: 'uint256', type: 'uint256' },
      { name: 'underlying', internalType: 'contract ERC20', type: 'address' },
      { name: 'oracleSigner', internalType: 'address', type: 'address' },
      {
        name: 'startingCollateral',
        internalType: 'contract ERC721[]',
        type: 'address[]',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'AccountHasNoDebt' },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  { type: 'error', inputs: [], name: 'AssetNotProposed' },
  { type: 'error', inputs: [], name: 'AuctionExists' },
  { type: 'error', inputs: [], name: 'CollateralAddressesDoNotMatch' },
  { type: 'error', inputs: [], name: 'DebtAmountExceedsUint184' },
  {
    type: 'error',
    inputs: [
      { name: 'vaultDebt', internalType: 'uint256', type: 'uint256' },
      { name: 'maxDebt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxDebt',
  },
  { type: 'error', inputs: [], name: 'FundingPeriodTooLong' },
  { type: 'error', inputs: [], name: 'FundingPeriodTooShort' },
  { type: 'error', inputs: [], name: 'IncorrectOracleSigner' },
  {
    type: 'error',
    inputs: [
      { name: 'received', internalType: 'uint256', type: 'uint256' },
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientPayment',
  },
  { type: 'error', inputs: [], name: 'InvalidAuction' },
  { type: 'error', inputs: [], name: 'InvalidCollateral' },
  { type: 'error', inputs: [], name: 'InvalidCollateralAccountPair' },
  { type: 'error', inputs: [], name: 'InvalidUniswapV3Pool' },
  { type: 'error', inputs: [], name: 'LiquidationsLocked' },
  {
    type: 'error',
    inputs: [
      { name: 'currentPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'maxPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MaxPriceTooLow',
  },
  { type: 'error', inputs: [], name: 'MinAuctionSpacing' },
  { type: 'error', inputs: [], name: 'NotLiquidatable' },
  { type: 'error', inputs: [], name: 'OnlyCollateralOwner' },
  { type: 'error', inputs: [], name: 'OracleMessageTimestampInvalid' },
  {
    type: 'error',
    inputs: [
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'currentTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PassedDeadline',
  },
  { type: 'error', inputs: [], name: 'PoolTokensDoNotMatch' },
  { type: 'error', inputs: [], name: 'ProposalPeriodNotComplete' },
  {
    type: 'error',
    inputs: [
      { name: 'minOut', internalType: 'uint256', type: 'uint256' },
      { name: 'actualOut', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'TooLittleOut',
  },
  { type: 'error', inputs: [], name: 'WrongCurrencyFromOracleMessage' },
  { type: 'error', inputs: [], name: 'WrongIdentifierFromOracleMessage' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralAddress',
        internalType: 'contract ERC721',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateral',
        internalType: 'contract ERC721',
        type: 'address',
        indexed: true,
      },
      { name: 'isAllowed', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'AllowCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'asset',
        internalType: 'contract ERC721',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'CancelProposedAllowedCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'auctionID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'price',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EndAuction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralAddress',
        internalType: 'contract ERC721',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IncreaseDebt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'asset',
        internalType: 'contract ERC721',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ProposeAllowedCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralAddress',
        internalType: 'contract ERC721',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReduceDebt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralAddress',
        internalType: 'contract ERC721',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemoveCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'discount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetAuctionCreatorDiscount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingPeriod',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetFundingPeriod',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetPool',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'auctionID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'auctionAssetID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'auctionAssetContract',
        internalType: 'contract ERC721',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nftOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'perPeriodDecayPercentWad',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'secondsInPeriod',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'startPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paymentAsset',
        internalType: 'contract ERC20',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'StartAuction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newPeriod',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdateFundingPeriod',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newPool',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UpdatePool',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newTarget',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdateTarget',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_PER_SECOND_PRICE_CHANGE',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'asset', internalType: 'contract ERC721', type: 'address' },
    ],
    name: 'acceptProposedCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'collateralArr',
        internalType: 'struct IPaprController.Collateral[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'contract ERC721', type: 'address' },
          { name: 'id', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'addCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'auctionCreatorDiscountPercentWad',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'auction',
        internalType: 'struct INFTEDA.Auction',
        type: 'tuple',
        components: [
          { name: 'nftOwner', internalType: 'address', type: 'address' },
          { name: 'auctionAssetID', internalType: 'uint256', type: 'uint256' },
          {
            name: 'auctionAssetContract',
            internalType: 'contract ERC721',
            type: 'address',
          },
          {
            name: 'perPeriodDecayPercentWad',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'secondsInPeriod', internalType: 'uint256', type: 'uint256' },
          { name: 'startPrice', internalType: 'uint256', type: 'uint256' },
          {
            name: 'paymentAsset',
            internalType: 'contract ERC20',
            type: 'address',
          },
        ],
      },
    ],
    name: 'auctionCurrentPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'auction',
        internalType: 'struct INFTEDA.Auction',
        type: 'tuple',
        components: [
          { name: 'nftOwner', internalType: 'address', type: 'address' },
          { name: 'auctionAssetID', internalType: 'uint256', type: 'uint256' },
          {
            name: 'auctionAssetContract',
            internalType: 'contract ERC721',
            type: 'address',
          },
          {
            name: 'perPeriodDecayPercentWad',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'secondsInPeriod', internalType: 'uint256', type: 'uint256' },
          { name: 'startPrice', internalType: 'uint256', type: 'uint256' },
          {
            name: 'paymentAsset',
            internalType: 'contract ERC20',
            type: 'address',
          },
        ],
      },
    ],
    name: 'auctionID',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'auctionStartTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'auctionState',
    outputs: [
      { name: 'startTime', internalType: 'uint96', type: 'uint96' },
      { name: 'starter', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      {
        name: 'collateralAsset',
        internalType: 'contract ERC721',
        type: 'address',
      },
      {
        name: 'params',
        internalType: 'struct IPaprController.SwapParams',
        type: 'tuple',
        components: [
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'minOut', internalType: 'uint256', type: 'uint256' },
          {
            name: 'sqrtPriceLimitX96',
            internalType: 'uint160',
            type: 'uint160',
          },
          { name: 'swapFeeTo', internalType: 'address', type: 'address' },
          { name: 'swapFeeBips', internalType: 'uint256', type: 'uint256' },
          { name: 'deadline', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'buyAndReduceDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'contract ERC721', type: 'address' }],
    name: 'cachedPriceForAsset',
    outputs: [
      { name: 'timestamp', internalType: 'uint40', type: 'uint40' },
      { name: 'price', internalType: 'uint216', type: 'uint216' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'asset', internalType: 'contract ERC721', type: 'address' },
    ],
    name: 'cancelProposedCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'contract ERC721', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'collateralOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fundingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'mintTo', internalType: 'address', type: 'address' },
      { name: 'asset', internalType: 'contract ERC721', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'oracleInfo',
        internalType: 'struct ReservoirOracleUnderwriter.OracleInfo',
        type: 'tuple',
        components: [
          {
            name: 'message',
            internalType: 'struct ReservoirOracle.Message',
            type: 'tuple',
            components: [
              { name: 'id', internalType: 'bytes32', type: 'bytes32' },
              { name: 'payload', internalType: 'bytes', type: 'bytes' },
              { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
              { name: 'signature', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'sig',
            internalType: 'struct ReservoirOracleUnderwriter.Sig',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
    name: 'increaseDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proceedsTo', internalType: 'address', type: 'address' },
      {
        name: 'collateralAsset',
        internalType: 'contract ERC721',
        type: 'address',
      },
      {
        name: 'params',
        internalType: 'struct IPaprController.SwapParams',
        type: 'tuple',
        components: [
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'minOut', internalType: 'uint256', type: 'uint256' },
          {
            name: 'sqrtPriceLimitX96',
            internalType: 'uint160',
            type: 'uint160',
          },
          { name: 'swapFeeTo', internalType: 'address', type: 'address' },
          { name: 'swapFeeBips', internalType: 'uint256', type: 'uint256' },
          { name: 'deadline', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'oracleInfo',
        internalType: 'struct ReservoirOracleUnderwriter.OracleInfo',
        type: 'tuple',
        components: [
          {
            name: 'message',
            internalType: 'struct ReservoirOracle.Message',
            type: 'tuple',
            components: [
              { name: 'id', internalType: 'bytes32', type: 'bytes32' },
              { name: 'payload', internalType: 'bytes', type: 'bytes' },
              { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
              { name: 'signature', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'sig',
            internalType: 'struct ReservoirOracleUnderwriter.Sig',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
    name: 'increaseDebtAndSell',
    outputs: [{ name: 'amountOut', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'contract ERC721', type: 'address' }],
    name: 'isAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'contract ERC721', type: 'address' }],
    name: 'lastAuctionStartPrice',
    outputs: [
      { name: 'timestamp', internalType: 'uint40', type: 'uint40' },
      { name: 'price', internalType: 'uint216', type: 'uint216' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastUpdated',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidationAuctionMinSpacing',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mark',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'totalCollateraValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'maxDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxLTV',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'newTarget',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: '_id', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'oracleSigner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'papr',
    outputs: [{ name: '', internalType: 'contract ERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'asset', internalType: 'contract ERC721', type: 'address' },
    ],
    name: 'proposeAllowedCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'auction',
        internalType: 'struct INFTEDA.Auction',
        type: 'tuple',
        components: [
          { name: 'nftOwner', internalType: 'address', type: 'address' },
          { name: 'auctionAssetID', internalType: 'uint256', type: 'uint256' },
          {
            name: 'auctionAssetContract',
            internalType: 'contract ERC721',
            type: 'address',
          },
          {
            name: 'perPeriodDecayPercentWad',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'secondsInPeriod', internalType: 'uint256', type: 'uint256' },
          { name: 'startPrice', internalType: 'uint256', type: 'uint256' },
          {
            name: 'paymentAsset',
            internalType: 'contract ERC20',
            type: 'address',
          },
        ],
      },
      { name: 'maxPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'sendTo', internalType: 'address', type: 'address' },
      {
        name: 'oracleInfo',
        internalType: 'struct ReservoirOracleUnderwriter.OracleInfo',
        type: 'tuple',
        components: [
          {
            name: 'message',
            internalType: 'struct ReservoirOracle.Message',
            type: 'tuple',
            components: [
              { name: 'id', internalType: 'bytes32', type: 'bytes32' },
              { name: 'payload', internalType: 'bytes', type: 'bytes' },
              { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
              { name: 'signature', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'sig',
            internalType: 'struct ReservoirOracleUnderwriter.Sig',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
    name: 'purchaseLiquidationAuctionNFT',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'asset', internalType: 'contract ERC721', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'reduceDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', internalType: 'contract ERC721[]', type: 'address[]' },
    ],
    name: 'removeAllowedCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sendTo', internalType: 'address', type: 'address' },
      {
        name: 'collateralArr',
        internalType: 'struct IPaprController.Collateral[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'contract ERC721', type: 'address' },
          { name: 'id', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'oracleInfo',
        internalType: 'struct ReservoirOracleUnderwriter.OracleInfo',
        type: 'tuple',
        components: [
          {
            name: 'message',
            internalType: 'struct ReservoirOracle.Message',
            type: 'tuple',
            components: [
              { name: 'id', internalType: 'bytes32', type: 'bytes32' },
              { name: 'payload', internalType: 'bytes', type: 'bytes' },
              { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
              { name: 'signature', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'sig',
            internalType: 'struct ReservoirOracleUnderwriter.Sig',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
    name: 'removeCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_fundingPeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setFundingPeriod',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      {
        name: 'collateral',
        internalType: 'struct IPaprController.Collateral',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'contract ERC721', type: 'address' },
          { name: 'id', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'oracleInfo',
        internalType: 'struct ReservoirOracleUnderwriter.OracleInfo',
        type: 'tuple',
        components: [
          {
            name: 'message',
            internalType: 'struct ReservoirOracle.Message',
            type: 'tuple',
            components: [
              { name: 'id', internalType: 'bytes32', type: 'bytes32' },
              { name: 'payload', internalType: 'bytes', type: 'bytes' },
              { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
              { name: 'signature', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'sig',
            internalType: 'struct ReservoirOracleUnderwriter.Sig',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
    name: 'startLiquidationAuction',
    outputs: [
      {
        name: 'auction',
        internalType: 'struct INFTEDA.Auction',
        type: 'tuple',
        components: [
          { name: 'nftOwner', internalType: 'address', type: 'address' },
          { name: 'auctionAssetID', internalType: 'uint256', type: 'uint256' },
          {
            name: 'auctionAssetContract',
            internalType: 'contract ERC721',
            type: 'address',
          },
          {
            name: 'perPeriodDecayPercentWad',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'secondsInPeriod', internalType: 'uint256', type: 'uint256' },
          { name: 'startPrice', internalType: 'uint256', type: 'uint256' },
          {
            name: 'paymentAsset',
            internalType: 'contract ERC20',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'target',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'underlying',
    outputs: [{ name: '', internalType: 'contract ERC20', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'asset', internalType: 'contract ERC721', type: 'address' },
      {
        name: 'priceKind',
        internalType: 'enum ReservoirOracleUnderwriter.PriceKind',
        type: 'uint8',
      },
      {
        name: 'oracleInfo',
        internalType: 'struct ReservoirOracleUnderwriter.OracleInfo',
        type: 'tuple',
        components: [
          {
            name: 'message',
            internalType: 'struct ReservoirOracle.Message',
            type: 'tuple',
            components: [
              { name: 'id', internalType: 'bytes32', type: 'bytes32' },
              { name: 'payload', internalType: 'bytes', type: 'bytes' },
              { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
              { name: 'signature', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'sig',
            internalType: 'struct ReservoirOracleUnderwriter.Sig',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
      { name: 'guard', internalType: 'bool', type: 'bool' },
    ],
    name: 'underwritePriceForCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount0Delta', internalType: 'int256', type: 'int256' },
      { name: 'amount1Delta', internalType: 'int256', type: 'int256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'uniswapV3SwapCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'updateTarget',
    outputs: [{ name: 'nTarget', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'asset', internalType: 'contract ERC721', type: 'address' },
    ],
    name: 'vaultInfo',
    outputs: [
      {
        name: '',
        internalType: 'struct IPaprController.VaultInfo',
        type: 'tuple',
        components: [
          { name: 'count', internalType: 'uint16', type: 'uint16' },
          { name: 'auctionCount', internalType: 'uint16', type: 'uint16' },
          {
            name: 'latestAuctionStartTime',
            internalType: 'uint40',
            type: 'uint40',
          },
          { name: 'debt', internalType: 'uint184', type: 'uint184' },
        ],
      },
    ],
  },
] as const;

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export const paprControllerAddress = {
  1: '0x3b29c19ff2fcEa0Ff98D0ef5B184354D74eA74b0',
} as const;

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export const paprControllerConfig = {
  address: paprControllerAddress,
  abi: paprControllerABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link paprControllerABI}__.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprController(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof paprControllerAddress;
  } = {} as any,
) {
  return useContract({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    ...config,
  });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof paprControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"MAX_PER_SECOND_PRICE_CHANGE"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerMaxPerSecondPriceChange<
  TSelectData = ReadContractResult<
    typeof paprControllerABI,
    'MAX_PER_SECOND_PRICE_CHANGE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'MAX_PER_SECOND_PRICE_CHANGE',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'MAX_PER_SECOND_PRICE_CHANGE',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'MAX_PER_SECOND_PRICE_CHANGE', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"auctionCreatorDiscountPercentWad"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerAuctionCreatorDiscountPercentWad<
  TSelectData = ReadContractResult<
    typeof paprControllerABI,
    'auctionCreatorDiscountPercentWad'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'auctionCreatorDiscountPercentWad',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'auctionCreatorDiscountPercentWad',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'auctionCreatorDiscountPercentWad', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"auctionCurrentPrice"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerAuctionCurrentPrice<
  TSelectData = ReadContractResult<
    typeof paprControllerABI,
    'auctionCurrentPrice'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'auctionCurrentPrice',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'auctionCurrentPrice',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'auctionCurrentPrice', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"auctionID"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerAuctionId<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'auctionID'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'auctionID', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'auctionID',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'auctionID', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"auctionStartTime"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerAuctionStartTime<
  TSelectData = ReadContractResult<
    typeof paprControllerABI,
    'auctionStartTime'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'auctionStartTime',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'auctionStartTime',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'auctionStartTime', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"auctionState"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerAuctionState<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'auctionState'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'auctionState',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'auctionState',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'auctionState', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"cachedPriceForAsset"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerCachedPriceForAsset<
  TSelectData = ReadContractResult<
    typeof paprControllerABI,
    'cachedPriceForAsset'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'cachedPriceForAsset',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'cachedPriceForAsset',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'cachedPriceForAsset', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"collateralOwner"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerCollateralOwner<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'collateralOwner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'collateralOwner',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'collateralOwner',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'collateralOwner', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"fundingPeriod"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerFundingPeriod<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'fundingPeriod'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'fundingPeriod',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'fundingPeriod',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'fundingPeriod', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"isAllowed"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerIsAllowed<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'isAllowed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'isAllowed', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'isAllowed',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'isAllowed', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"lastAuctionStartPrice"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerLastAuctionStartPrice<
  TSelectData = ReadContractResult<
    typeof paprControllerABI,
    'lastAuctionStartPrice'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'lastAuctionStartPrice',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'lastAuctionStartPrice',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'lastAuctionStartPrice', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"lastUpdated"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerLastUpdated<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'lastUpdated'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'lastUpdated', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'lastUpdated',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'lastUpdated', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"liquidationAuctionMinSpacing"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerLiquidationAuctionMinSpacing<
  TSelectData = ReadContractResult<
    typeof paprControllerABI,
    'liquidationAuctionMinSpacing'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'liquidationAuctionMinSpacing',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'liquidationAuctionMinSpacing',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'liquidationAuctionMinSpacing', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"mark"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerMark<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'mark'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'mark', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'mark',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'mark', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"maxDebt"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerMaxDebt<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'maxDebt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'maxDebt', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'maxDebt',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'maxDebt', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"maxLTV"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerMaxLtv<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'maxLTV'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'maxLTV', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'maxLTV',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'maxLTV', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"newTarget"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerNewTarget<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'newTarget'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'newTarget', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'newTarget',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'newTarget', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"oracleSigner"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerOracleSigner<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'oracleSigner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'oracleSigner',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'oracleSigner',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'oracleSigner', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerOwner<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'owner', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'owner', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"papr"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerPapr<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'papr'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'papr', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'papr',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'papr', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"pendingOwner"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerPendingOwner<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'pendingOwner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof paprControllerABI,
      'pendingOwner',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'pendingOwner',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'pendingOwner', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"pool"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerPool<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'pool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'pool', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'pool',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'pool', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"target"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerTarget<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'target'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'target', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'target',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'target', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"underlying"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerUnderlying<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'underlying'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'underlying', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'underlying',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'underlying', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"vaultInfo"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerVaultInfo<
  TSelectData = ReadContractResult<typeof paprControllerABI, 'vaultInfo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof paprControllerABI, 'vaultInfo', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractRead({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'vaultInfo',
    ...config,
  } as UseContractReadConfig<typeof paprControllerABI, 'vaultInfo', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof paprControllerABI, string>['abi'],
        TFunctionName
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof paprControllerABI, TFunctionName> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, TFunctionName>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"acceptOwnership"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerAcceptOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'acceptOwnership'
        >['abi'],
        'acceptOwnership'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'acceptOwnership';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'acceptOwnership'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'acceptOwnership';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'acceptOwnership'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'acceptOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"acceptProposedCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerAcceptProposedCollateral<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'acceptProposedCollateral'
        >['abi'],
        'acceptProposedCollateral'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'acceptProposedCollateral';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'acceptProposedCollateral'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'acceptProposedCollateral';
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof paprControllerABI,
    'acceptProposedCollateral'
  >({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'acceptProposedCollateral',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"addCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerAddCollateral<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'addCollateral'
        >['abi'],
        'addCollateral'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'addCollateral';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'addCollateral'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'addCollateral';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'addCollateral'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'addCollateral',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"buyAndReduceDebt"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerBuyAndReduceDebt<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'buyAndReduceDebt'
        >['abi'],
        'buyAndReduceDebt'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'buyAndReduceDebt';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'buyAndReduceDebt'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'buyAndReduceDebt';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'buyAndReduceDebt'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'buyAndReduceDebt',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"cancelProposedCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerCancelProposedCollateral<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'cancelProposedCollateral'
        >['abi'],
        'cancelProposedCollateral'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'cancelProposedCollateral';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'cancelProposedCollateral'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'cancelProposedCollateral';
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof paprControllerABI,
    'cancelProposedCollateral'
  >({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'cancelProposedCollateral',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"increaseDebt"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerIncreaseDebt<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'increaseDebt'
        >['abi'],
        'increaseDebt'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'increaseDebt';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'increaseDebt'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'increaseDebt';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'increaseDebt'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'increaseDebt',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"increaseDebtAndSell"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerIncreaseDebtAndSell<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'increaseDebtAndSell'
        >['abi'],
        'increaseDebtAndSell'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'increaseDebtAndSell';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'increaseDebtAndSell'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'increaseDebtAndSell';
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof paprControllerABI,
    'increaseDebtAndSell'
  >({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'increaseDebtAndSell',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"multicall"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerMulticall<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'multicall'
        >['abi'],
        'multicall'
      > & { address?: Address; chainId?: TChainId; functionName?: 'multicall' }
    : UseContractWriteConfig<TMode, typeof paprControllerABI, 'multicall'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'multicall';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'multicall'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'multicall',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"onERC721Received"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerOnErc721Received<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'onERC721Received';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'onERC721Received'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'onERC721Received';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'onERC721Received'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'onERC721Received',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"proposeAllowedCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerProposeAllowedCollateral<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'proposeAllowedCollateral'
        >['abi'],
        'proposeAllowedCollateral'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'proposeAllowedCollateral';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'proposeAllowedCollateral'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'proposeAllowedCollateral';
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof paprControllerABI,
    'proposeAllowedCollateral'
  >({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'proposeAllowedCollateral',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"purchaseLiquidationAuctionNFT"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerPurchaseLiquidationAuctionNft<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'purchaseLiquidationAuctionNFT'
        >['abi'],
        'purchaseLiquidationAuctionNFT'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'purchaseLiquidationAuctionNFT';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'purchaseLiquidationAuctionNFT'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'purchaseLiquidationAuctionNFT';
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof paprControllerABI,
    'purchaseLiquidationAuctionNFT'
  >({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'purchaseLiquidationAuctionNFT',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"reduceDebt"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerReduceDebt<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'reduceDebt'
        >['abi'],
        'reduceDebt'
      > & { address?: Address; chainId?: TChainId; functionName?: 'reduceDebt' }
    : UseContractWriteConfig<TMode, typeof paprControllerABI, 'reduceDebt'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'reduceDebt';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'reduceDebt'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'reduceDebt',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"removeAllowedCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerRemoveAllowedCollateral<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'removeAllowedCollateral'
        >['abi'],
        'removeAllowedCollateral'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'removeAllowedCollateral';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'removeAllowedCollateral'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'removeAllowedCollateral';
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof paprControllerABI,
    'removeAllowedCollateral'
  >({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'removeAllowedCollateral',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"removeCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerRemoveCollateral<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'removeCollateral'
        >['abi'],
        'removeCollateral'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'removeCollateral';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'removeCollateral'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'removeCollateral';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'removeCollateral'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'removeCollateral',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerRenounceOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'renounceOwnership';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'renounceOwnership'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'renounceOwnership';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'renounceOwnership'>(
    {
      abi: paprControllerABI,
      address: paprControllerAddress[1],
      functionName: 'renounceOwnership',
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"setFundingPeriod"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerSetFundingPeriod<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'setFundingPeriod'
        >['abi'],
        'setFundingPeriod'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'setFundingPeriod';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'setFundingPeriod'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setFundingPeriod';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'setFundingPeriod'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'setFundingPeriod',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"setPool"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerSetPool<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof paprControllerABI, 'setPool'>['abi'],
        'setPool'
      > & { address?: Address; chainId?: TChainId; functionName?: 'setPool' }
    : UseContractWriteConfig<TMode, typeof paprControllerABI, 'setPool'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setPool';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'setPool'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'setPool',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"startLiquidationAuction"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerStartLiquidationAuction<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'startLiquidationAuction'
        >['abi'],
        'startLiquidationAuction'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'startLiquidationAuction';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'startLiquidationAuction'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'startLiquidationAuction';
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof paprControllerABI,
    'startLiquidationAuction'
  >({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'startLiquidationAuction',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerTransferOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'transferOwnership';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'transferOwnership'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'transferOwnership';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'transferOwnership'>(
    {
      abi: paprControllerABI,
      address: paprControllerAddress[1],
      functionName: 'transferOwnership',
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"underwritePriceForCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerUnderwritePriceForCollateral<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'underwritePriceForCollateral'
        >['abi'],
        'underwritePriceForCollateral'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'underwritePriceForCollateral';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'underwritePriceForCollateral'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'underwritePriceForCollateral';
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof paprControllerABI,
    'underwritePriceForCollateral'
  >({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'underwritePriceForCollateral',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerUniswapV3SwapCallback<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'uniswapV3SwapCallback'
        >['abi'],
        'uniswapV3SwapCallback'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'uniswapV3SwapCallback';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'uniswapV3SwapCallback'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'uniswapV3SwapCallback';
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof paprControllerABI,
    'uniswapV3SwapCallback'
  >({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'uniswapV3SwapCallback',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"updateTarget"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerUpdateTarget<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof paprControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof paprControllerABI,
          'updateTarget'
        >['abi'],
        'updateTarget'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'updateTarget';
      }
    : UseContractWriteConfig<
        TMode,
        typeof paprControllerABI,
        'updateTarget'
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'updateTarget';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paprControllerABI, 'updateTarget'>({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'updateTarget',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"acceptOwnership"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'acceptOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'acceptOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'acceptOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"acceptProposedCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerAcceptProposedCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'acceptProposedCollateral'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'acceptProposedCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'acceptProposedCollateral'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"addCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerAddCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'addCollateral'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'addCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'addCollateral'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"buyAndReduceDebt"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerBuyAndReduceDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'buyAndReduceDebt'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'buyAndReduceDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'buyAndReduceDebt'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"cancelProposedCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerCancelProposedCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'cancelProposedCollateral'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'cancelProposedCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'cancelProposedCollateral'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"increaseDebt"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerIncreaseDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'increaseDebt'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'increaseDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'increaseDebt'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"increaseDebtAndSell"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerIncreaseDebtAndSell(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'increaseDebtAndSell'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'increaseDebtAndSell',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'increaseDebtAndSell'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"multicall"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'multicall'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'multicall'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"onERC721Received"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'onERC721Received'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'onERC721Received'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"proposeAllowedCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerProposeAllowedCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'proposeAllowedCollateral'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'proposeAllowedCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'proposeAllowedCollateral'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"purchaseLiquidationAuctionNFT"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerPurchaseLiquidationAuctionNft(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'purchaseLiquidationAuctionNFT'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'purchaseLiquidationAuctionNFT',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'purchaseLiquidationAuctionNFT'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"reduceDebt"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerReduceDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'reduceDebt'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'reduceDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'reduceDebt'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"removeAllowedCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerRemoveAllowedCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'removeAllowedCollateral'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'removeAllowedCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'removeAllowedCollateral'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"removeCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerRemoveCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'removeCollateral'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'removeCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'removeCollateral'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'renounceOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'renounceOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"setFundingPeriod"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerSetFundingPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'setFundingPeriod'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'setFundingPeriod',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'setFundingPeriod'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"setPool"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerSetPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'setPool'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'setPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'setPool'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"startLiquidationAuction"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerStartLiquidationAuction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'startLiquidationAuction'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'startLiquidationAuction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'startLiquidationAuction'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'transferOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'transferOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"underwritePriceForCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerUnderwritePriceForCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'underwritePriceForCollateral'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'underwritePriceForCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'underwritePriceForCollateral'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerUniswapV3SwapCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof paprControllerABI,
      'uniswapV3SwapCallback'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'uniswapV3SwapCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'uniswapV3SwapCallback'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paprControllerABI}__ and `functionName` set to `"updateTarget"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePreparePaprControllerUpdateTarget(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paprControllerABI, 'updateTarget'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    functionName: 'updateTarget',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paprControllerABI, 'updateTarget'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"AddCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerAddCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'AddCollateral'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'AddCollateral',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'AddCollateral'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"AllowCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerAllowCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'AllowCollateral'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'AllowCollateral',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'AllowCollateral'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"CancelProposedAllowedCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerCancelProposedAllowedCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof paprControllerABI,
      'CancelProposedAllowedCollateral'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'CancelProposedAllowedCollateral',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'CancelProposedAllowedCollateral'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"EndAuction"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerEndAuctionEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'EndAuction'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'EndAuction',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'EndAuction'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"IncreaseDebt"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerIncreaseDebtEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'IncreaseDebt'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'IncreaseDebt',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'IncreaseDebt'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof paprControllerABI,
      'OwnershipTransferStarted'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'OwnershipTransferStarted',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'OwnershipTransferStarted'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'OwnershipTransferred'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"ProposeAllowedCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerProposeAllowedCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof paprControllerABI,
      'ProposeAllowedCollateral'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'ProposeAllowedCollateral',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'ProposeAllowedCollateral'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"ReduceDebt"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerReduceDebtEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'ReduceDebt'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'ReduceDebt',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'ReduceDebt'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"RemoveCollateral"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerRemoveCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'RemoveCollateral'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'RemoveCollateral',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'RemoveCollateral'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"SetAuctionCreatorDiscount"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerSetAuctionCreatorDiscountEvent(
  config: Omit<
    UseContractEventConfig<
      typeof paprControllerABI,
      'SetAuctionCreatorDiscount'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'SetAuctionCreatorDiscount',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'SetAuctionCreatorDiscount'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"SetFundingPeriod"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerSetFundingPeriodEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'SetFundingPeriod'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'SetFundingPeriod',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'SetFundingPeriod'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"SetPool"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerSetPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'SetPool'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'SetPool',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'SetPool'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"StartAuction"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerStartAuctionEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'StartAuction'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'StartAuction',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'StartAuction'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"UpdateFundingPeriod"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerUpdateFundingPeriodEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'UpdateFundingPeriod'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'UpdateFundingPeriod',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'UpdateFundingPeriod'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"UpdatePool"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerUpdatePoolEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'UpdatePool'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'UpdatePool',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'UpdatePool'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link paprControllerABI}__ and `eventName` set to `"UpdateTarget"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3b29c19ff2fcea0ff98d0ef5b184354d74ea74b0)
 */
export function usePaprControllerUpdateTargetEvent(
  config: Omit<
    UseContractEventConfig<typeof paprControllerABI, 'UpdateTarget'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof paprControllerAddress } = {} as any,
) {
  return useContractEvent({
    abi: paprControllerABI,
    address: paprControllerAddress[1],
    eventName: 'UpdateTarget',
    ...config,
  } as UseContractEventConfig<typeof paprControllerABI, 'UpdateTarget'>);
}
